#!/usr/bin/env ruby
root = File.expand_path("#{File.dirname(__FILE__)}/..")
$LOAD_PATH.unshift("#{root}/lib") if File.directory?("#{root}/lib")
USAGE = File.read("#{root}/README")

require 'readline'
require 'yaml'

require 'rubygems'
require 'fog'

require 'zonify'


class CLIAWS
  attr_reader :options
  def initialize(access=nil, secret=nil)
    @options = {}
    @options.merge!(options) if options
    env_adapter
    { :region                => ENV['AWS_REGION'],
      :aws_access_key_id     => (access or ENV['AWS_ACCESS_KEY']),
      :aws_secret_access_key => (secret or ENV['AWS_SECRET_KEY'])
    }.each{|k,v| @options.merge!(k=>v) if v }
  end
  def respond_to?(sym)
    aws.respond_to?(sym)
  end
  def env_adapter
    [ %w| AWS_ACCESS_KEY_ID     AWS_ACCESS_KEY |,
      %w| AWS_SECRET_ACCESS_KEY AWS_SECRET_KEY | ].each do |a, b|
      ENV[a] = ENV[b] if ENV[b]     # Ensure new variable takes precedence.
      ENV[b] = ENV[a] unless ENV[b]
    end
    # Sometimes libraries can not not handle being passed a region if the
    # EC2_URL is set.
    ENV['EC2_URL'] = nil if ENV['AWS_REGION']
  end
  def method_missing(sym, *args, &block)
    begin
      aws.send(sym, *args, &block)
    rescue Fog::Errors::Error => e
      abort "AWS error: #{e}"
    end
  end
  def aws
    @aws ||= Zonify::AWS.create(@options)
  end
end

def rejected(rejected_changes)
  unless rejected_changes.empty?
    STDERR.puts 'Rejected some changes, because they were too large.'
    rejected_changes.each do |change|
      STDOUT.puts <<YAML
- :name: #{change[:name]}
  :type: #{change[:type]}
YAML
    end
  end
end

def check_name(suffix)
  abort 'No domain given.' unless suffix
  unless suffix.split('.').all?{|s| s.empty? or Zonify::LDH_RE.match(s) }
    abort "Not a conventional, LDH domain name: #{suffix}"
  end
end

def display(changes)
  if changes.empty?
    'No changes; nothing to do.'
  else
    summary = changes.inject({}) do |acc, change|
      name, type, set = [change[:name], change[:type], change[:set_identifier]]
      key = "#{name} #{type}" + ( set ? " (#{set})" : "" )
      acc[key] ||= []
      acc[key]  << change[:action]
      acc
    end.map do |k, v|
      case v
      when ['DELETE', 'CREATE'] then [k, 'replace']
      when ['DELETE']          then [k, 'delete']
      when ['CREATE']          then [k, 'create']
      end
    end.sort
    len = summary.map{|name, op| [name.length, 64].min }.max
    formatted = summary.map{|name, op| name.ljust(len) + "  --->  " + op }
    formatted.unshift("There are #{summary.length} changes.").join("\n")
  end
end

def yaml_with_default(source, default)
  s = source.read.rstrip
  unless s.empty?
    yaml = YAML.load(s)
    abort 'Bad YAML parse.' unless yaml
    yaml
  else
    default
  end
end

def normed_with_mappings(mapping_args, suffix, records, norm=true)
  mappings = mapping_args.map{|s| Zonify::Mappings.parse(s) }
  abort 'Bad mapping parse.' if mappings.any?{|r| r.nil? }
  mappings.each{|k, v| ([k] + v).each{|s| check_name(s) } }
  clipped  = Zonify::Mappings.rewrite(records, [[suffix,['.']]])
  mapped   = Zonify::Mappings.rewrite(clipped, mappings)
  restored = Zonify::Mappings.rewrite(mapped, [['.',[suffix]]])
  norm ? Zonify.normalize(restored) : restored
end

def confirm_dialogue
  # Restore terminal state on SIGINT. Needed due to use of Readline.
  stty_save = `stty -g 2>/dev/null`.chomp
  trap('INT') do
    system('stty', stty_save)
    exit
  end
  perform = false
  msg = 'Perform changes?'
  while line = Readline.readline("#{msg} [Y/n]  ")
    case line
    when /^(n|no)$/i
      perform = false
      STDERR.puts 'Abandoning changes...'
      break
    when /^(y|yes|)$/i
      perform = true
      STDERR.puts 'Initiating changes...'
      break
    when nil
      perform = false
      break
    else
      msg = "Perform changes? Please answer with 'y' or 'n'."
    end
  end
  perform
end

def main
  if ARGV.any?{|arg| %w| help -h --help -? |.member?(arg) }
    puts USAGE
    exit
  end
  #confirm = [ARGV.delete("-c"), ARGV.delete("--confirm")].any?
  confirm = false
  quiet      = (ARGV.delete("-q") or ARGV.delete("--quiet"))
  netlogging = (ARGV.delete("-n") or ARGV.delete("--net"))
  norm       = (ARGV.delete("--srv-singleton") or not
                ARGV.delete("--no-srv-singleton"))
  aws = CLIAWS.new
  types = nil
  while i = ARGV.index('--types')
    ARGV.delete_at(i)
    types = ARGV[i].split(/ +| *, */)
    ARGV.delete_at(i)
    bad = types.map{|s| s if not Zonify::RRTYPE_RE.match(s) }.compact
    abort "Bad RR types: #{bad.join(' ')}" unless bad.empty?
  end
  case ARGV[0]
  when 'ec2'
    data = aws.ec2_zone
    mappings = (ARGV[1..-1] or [])
    mapped = normed_with_mappings(mappings, '.', data, norm)
    STDOUT.write Zonify::YAML.format(mapped, '.')
  when 'r53'
    suffix = ARGV[1]
    check_name(suffix)
    zone, data = aws.route53_zone(suffix)
    if zone and data
      STDOUT.write Zonify::YAML.format(data, suffix)
    else
      STDERR.puts 'No zone found; outputting nonce zone.'
      STDOUT.write Zonify::YAML.format({}, '.')
    end
  when 'eips'
    result = aws.eip_scan
    entries = result.keys.sort.map do |k|
      dumped = ::YAML.dump(k=>result[k])
      Zonify::YAML.trim_lines(dumped).join.sub(/ *\[\]$/,'')
    end.join
    STDOUT.write entries
  when 'diff'
    suffix, old_records = Zonify::YAML.read(File.read(ARGV[1]))
    new_suffix, new_records = Zonify::YAML.read(File.read(ARGV[2]))
    qualified = Zonify::Mappings.rewrite(new_records, [[new_suffix,[suffix]]])
    changes = Zonify.diff(qualified, old_records, (types or %w| * |))
    STDERR.puts(display(changes)) unless quiet
    STDOUT.write(Zonify::YAML.trim_lines(YAML.dump(changes)).join)
  when 'sync'
    suffix = ARGV[1]
    check_name(suffix)
    new_records = aws.ec2_zone
    mappings = (ARGV[2..-1] or [])
    mapped = normed_with_mappings(mappings, suffix, new_records)
    _, old_records = aws.route53_zone(suffix)
    changes = Zonify.diff(mapped, old_records, (types or %w| CNAME SRV |))
    STDERR.puts(display(changes)) if confirm or not quiet
    perform = if confirm and not changes.empty?
                confirm_dialogue
              else
                true
              end
    rejected(aws.apply(changes)) if perform
  when 'ec2/r53'
    suffix = ARGV[1]
    check_name(suffix)
    new_records = aws.ec2_zone
    mappings = (ARGV[2..-1] or [])
    mapped = normed_with_mappings(mappings, suffix, new_records)
    _, old_records = aws.route53_zone(suffix)
    changes = Zonify.diff(mapped, old_records, (types or %w| CNAME SRV |))
    STDERR.puts(display(changes)) unless quiet
    STDOUT.write(Zonify::YAML.trim_lines(YAML.dump(changes)).join)
  when 'summarize'
    handle = ARGV[1] ? File.open(ARGV[1]) : STDIN
    changes = yaml_with_default(handle, [])
    STDOUT.puts(display(changes))
  when 'apply'
    handle = ARGV[1] ? File.open(ARGV[1]) : STDIN
    changes = yaml_with_default(handle, [])
    STDERR.puts "" unless changes
    STDERR.puts(display(changes)) if confirm or not quiet
    perform = if confirm and not changes.empty?
                confirm_dialogue
              else
                true
              end
    rejected(aws.apply(changes)) if perform
  when 'rewrite'
    suffix, records = Zonify::YAML.read(STDIN)
    mappings = (ARGV[1..-1] or [])
    abort 'No mappings given.' if mappings.empty?
    mapped = normed_with_mappings(mappings, suffix, records, norm)
    STDOUT.write(Zonify::YAML.format(mapped, suffix))
  when 'normalize'
    suffix, records = Zonify::YAML.read(STDIN)
    desired_suffix = ARGV[1]
    normed = if desired_suffix
               normed_with_mappings([], desired_suffix, records)
             else
               Zonify.normalize(records)
             end
    STDOUT.write(Zonify::YAML.format(normed, (desired_suffix or suffix)))
  else
    abort 'Argument error.'
  end
end

main

